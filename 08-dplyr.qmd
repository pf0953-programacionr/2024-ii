# dplyr - gramática para manipulación de datos

## Trabajo previo {.unnumbered}

### Lecturas {.unnumbered}
Wickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (s. f.). *R for Data Science (2nd ed.) Chapter 4 - Data transformation*. Recuperado 5 de mayo de 2024, de <https://r4ds.hadley.nz/data-transform.html>

## Introducción {.unnumbered}
El paquete [dplyr](https://dplyr.tidyverse.org/) de [Tidyverse](https://www.tidyverse.org/) es descrito como una *gramática para la manipulación de datos*, la cual proporciona un conjunto consistente de "verbos" que ayuda a solucionar los retos de procesamiento de datos más comunes. Los principales verbos (i.e. funciones) de esta gramática son:

[select()](https://dplyr.tidyverse.org/reference/select.html): selecciona columnas con base en sus nombres.

[filter()](https://dplyr.tidyverse.org/reference/filter.html): selecciona filas con base en sus valores.

[arrange()](https://dplyr.tidyverse.org/reference/arrange.html): cambia el orden de las filas.

[mutate()](https://dplyr.tidyverse.org/reference/mutate.html): crea nuevas columnas, las cuales se expresan como funciones de columnas existentes.

[summarize()](https://dplyr.tidyverse.org/reference/summarise.html): agrupa y resume valores.

Todas estas operaciones pueden combinarse con la función [group_by()](https://dplyr.tidyverse.org/reference/group_by.html), la cual ejecuta cualquiera de las operaciones anteriores "en grupo". Además, dplyr proporciona [funciones adicionales](https://dplyr.tidyverse.org/reference/index.html) para tareas más específicas.

Las funciones de dplyr pueden encadenarse a través del operador *pipe* (tubo), ya sea el del paquete magrittr [(%\>%)](https://magrittr.tidyverse.org/reference/pipe.html) o el del paquete base de R [(\|\>)](https://michaelbarrowman.co.uk/post/the-new-base-pipe/). En el material de este curso, se prefiere la segunda opción. Los *pipes* se utilizan para comunicar procesos y así formar *pipelines* (tuberías).

Todas las funciones de dplyr trabajan de manera similar:

1.  El primer argumento siempre es un data frame. Puede omitirse si la función recibe el data frame a través del operador *pipe*.
2.  Los argumentos siguientes describen que hacer con el data frame, utilizando los nombres de las columnas (sin comillas).\
3.  El resultado siempre es un nuevo data frame.

Ya que cada función de dplyr se especializa en una sola tarea, usualmente es necesario encadenar funciones mediante *pipes* para lograr un objetivo de procesamiento de datos. Por ejemplo, el siguiente bloque de código usa tres verbos, o funciones, de dplyr para obtener la masa promedio de cada especie de pingüinos que habita en la isla Biscoe.

```{r}
#| label: ejemplo-pipes
#| eval: false

# Cálculo de la masa promedio para cada especie de pingüinos
# que habita en la isla Biscoe
penguins |>
  filter(island == "Biscoe") |> 
  group_by(species) |> 
  summarize(
    body_mass_g_mean = mean(body_mass_g, na.rm = TRUE)
  )
```

```
A tibble: 2 × 2
species body_mass_g_mean
<fct>              <dbl>
Adelie          3710.659
Gentoo          5076.016
```

## Instalación y carga
El paquete dplyr puede instalarse junto con todos los demás paquete de Tidyverse o de manera individual:

```{r}
#| label: instalacion-dplyr
#| eval: false

# Instalación conjunta de Tidyverse
install.packages("tidyverse")

# Instalación individual
install.packages("dplyr")
```

Una vez instalado, dplyr puede cargarse con la función `library()`:

```{r}
#| label: carga-dplyr
#| message: false

# Carga conjunta de Tidyverse
library(tidyverse)

# Carga individual
library(dplyr)
```

Seguidamente, se cargan algunos paquetes adicionales que se utilizan en este capítulo.

```{r}
#| label: carga-otros
#| message: false

# Carga de readr, paquete para lectura de datos
library(readr)

# Carga de tidyr, paquete para creación de datos "tidy"
library(tidyr)

# Carga de knitr, paquete para integrar salidas en R en documentos dinámicos
# (ej. Quarto). En este capítulo se usa para generar tablas.
library(knitr)
```

## Conjuntos de datos para ejemplos
En los ejemplos de este capítulo, se utilizan dos conjunto de datos:

- [Pingüinos del archipiélago Palmer](https://allisonhorst.github.io/palmerpenguins/#about-the-data) de [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/).
- [Países (*Admin 0 – Details*)](https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_0_sovereignty.zip) de [Natural Earth](https://www.naturalearthdata.com/).
- [Esperanza de vida al nacer)](https://raw.githubusercontent.com/pf0953-programacionr/2024-ii/refs/heads/main/datos/world-bank/paises-esperanza-vida.csv) de [Banco Mundial - Indicadores](https://datos.bancomundial.org/indicador/SP.DYN.LE00.IN).

### Pingüinos del archipiélago Palmer
Para cargar el conjunto de datos `penguins`, basta con cargar el paquete `palmerpenguins`.

```{r}
#| label: carga-penguins
#| message: false

# Carga del paquete de datos palmerpenguins
library(palmerpenguins)
```

La función [glimpse()](https://dplyr.tidyverse.org/reference/glimpse.html) despliega la estructura de un conjunto de datos, incluyendo los nombres de las columnas, sus tipos de datos y una muestra de estos:

```{r}
#| label: estructura-penguins

# Estructura del conjunto de datos penguins
glimpse(penguins)
```

La función también puede llamarse mediante un *pipe*:

```{r}
#| label: estructura-penguins-pipe

# Estructura del conjunto de datos penguins
penguins |>
  glimpse()
```

Un conjunto de datos puede visualizarse al escribir su nombre en la consola de R o en un programa:

```{r}
#| label: vista-penguins
#| eval: true

# Despliegue de los datos de penguins
penguins
```

`penguins` es un [tibble](https://tibble.tidyverse.org/), un tipo especial de data frame que se utiliza en Tidyverse. La diferencia más importante entre un tibble y un data frame es la manera en la que se imprimen: los tibbles están diseñados para conjuntos de datos grandes, por lo que solo muestran los primeros registros y las columnas que caben en la pantalla. Un data frame regular muestra todas sus columnas y muchos más registros, lo que dificulta su visualización. Note la diferencia, por ejemplo, con la forma en la que se despliega el conjunto de datos `iris` (observe también la diferencia entre las salidas de `class(iris)` y `class(penguins)`). A pesar de estas diferencias en el despliegue, en general, un data frame regular y un tibble pueden tratarse indistintamente.

Para generar una salida más estilizada, puede usarse la función [knitr::kable()](https://rdrr.io/cran/knitr/man/kable.html), la cual genera tablas para documentos web. En el siguiente ejemplo, se obtienen los primeros registros de penguins con la función [head()](https://rdrr.io/r/utils/head.html) y se despliegan en una tabla mediante `kable()`.

```{r}
#| label: penguins-kable
#| eval: true

# Despliegue de los primeros registros de penguins en una tabla kable
penguins |>
  head(n = 10) |>
  kable(format = "html")
```

### Países
Se utiliza la función [readr::read_csv()](https://readr.tidyverse.org/reference/read_delim.html) para leer un archivo CSV almacenado en el repositorio GitHub de este curso, con los datos de las estadísticas policiales proporcionados por el OIJ en formato Excel. `readr::read_csv()` es más eficiente que `read.csv()` (del paquete base de R) y tiene otras ventajas como detección automática de tipos de datos y mejor integración con otros paquetes de Tidyverse (ej. dplyr, tidyr, ggplot2).

```{r}
#| label: carga-paises
#| message: false

# Carga de los datos de países
paises <-
  read_csv(
    "https://raw.githubusercontent.com/pf0953-programacionr/2024-ii/refs/heads/main/datos/natural-earth/paises.csv"
  )
```

Estructura del conjunto de datos:

```{r}
#| label: estructura-paises

# Estructura de los datos de países
glimpse(paises)
```

Despliegue de los datos (debido a que `paises` es un data frame, pero no un tibble, se limitan manualmente las filas y columnas que se muestran):

```{r}
#| label: vista-paises
#| eval: true

# Despliegue de los primeros registros de paises en una tabla kable
paises |>
  head(n = 10) |>
  kable(format = "html")
```

### Esperanza de vida al nacer

```{r}
#| label: carga-esperanza-vida
#| message: false

# Carga de los datos de esperanza de vida en países
esperanza_vida <-
  read_csv(
    "https://raw.githubusercontent.com/pf0953-programacionr/2024-ii/refs/heads/main/datos/world-bank/paises-esperanza-vida.csv"
  )
```

Estructura del conjunto de datos:

```{r}
#| label: estructura-esperanza-vida

# Estructura de los datos de esperanza de vida
glimpse(esperanza_vida)
```

Despliegue de los datos:

```{r}
#| label: vista-esperanza-vida
#| eval: true

# Despliegue de los primeros registros de esperanza de vida en una tabla kable
esperanza_vida |>
  head(n = 10) |>
  kable(format = "html")
```

## Funciones
En esta sección, se describen y ejemplifican las principales funciones de dplyr.

### select()
La función [select()](https://dplyr.tidyverse.org/reference/select.html) selecciona (y opcionalmente renombra) columnas de un data frame con base en sus nombres.

```{r}
#| label: select-ejemplo-01

# Selección de las columnas ADM0_ISO, NAME, POP_EST, GDP_MD
paises |>
  select(ADM0_ISO, NAME, POP_EST, GDP_MD)
```

Cambio de nombres de columnas:

```{r}
#| label: select-ejemplo-02

# Selección y cambio de nombre de las columnas 
# ADM0_ISO, NAME, POP_EST, GDP_MD
paises |>
  select(CODIGO_ISO_3 = ADM0_ISO,
         NOMBRE = NAME,
         POBLACION_ESTIMADA = POP_EST,
         PIB_MD = GDP_MD)
```

El operador `:` permite seleccionar un rango de columnas continuas:

```{r}
#| label: select-ejemplo-03

# Selección de las columnas desde CONTINENT hasta INCOME_GRP
paises |>
  select(CONTINENT:INCOME_GRP)
```

Selección de todas las columnas que cumplen una condición:

```{r}
#| label: select-ejemplo-04

# Selección de las columnas numéricas
paises |>
  select(where(is.numeric))
```

### filter()
La función [filter()](https://dplyr.tidyverse.org/reference/filter.html) retorna un subconjunto de un data frame con todas las filas que satisfacen una condición (i.e. expresión lógica).

Puede utilizar los operadores relacionales:

- `==` (igual que) **Note la diferencia con el operador de asignación (`=`)**
- `!=` (diferente de)
- `>` (estrictamente mayor que), `>=` (mayor o igual que)
- `<` (estrictamente menor que), `<=` (menor o igual que)

Y los operadores lógicos:

- `&` (*AND* o Y lógico)
- `|` (*OR* u O lógico)
- `!` (*NOT* o NO lógico)

Ejemplos de uso de expresiones y operadores lógicos:

```{r}
#| label: filter-ejemplo-01

# Países de Asia con ingresos alto y en la OCDE
# 
paises |>
  filter(CONTINENT == 'Asia' & INCOME_GRP == '1. High income: OECD')
```

```{r}
#| label: filter-ejemplo-02

# Países de América del Norte o de América del Sur
paises |>
  filter(CONTINENT == 'North America' | CONTINENT == 'South America')
```

```{r}
#| label: filter-ejemplo-04

# Países no europeos
paises |>
  filter(!(CONTINENT == 'Europe'))
```

```{r}
#| label: filter-ejemplo-05

# Países de Europa en el G7
# solo con las columnas ADM0_ISO, NAME, POP_EST
paises |>
  filter(CONTINENT == "Europe" & ECONOMY == "1. Developed region: G7") |>
  select(ADM0_ISO, NAME, POP_EST) |>
  kable()
```

```{r}
#| label: filter-ejemplo-06

# Países con población mayor o igual al promedio
#   El argumento lógico na.rm de mean() 
#   indica si los valores NA ("not available") 
#   deben ser removidos antes del cálculo
paises |>
  filter(POP_EST >= mean(POP_EST, na.rm = TRUE)) |>
  select(ADM0_ISO, NAME, POP_EST)
```

Condiciones relacionadas con valores `NA` (nulos):

```{r}
#| label: filter-ejemplo-07

# Filas con valor NA en la columna 2022 (año 2022)
# del conjunto de datos de esperanza de vida
esperanza_vida |>
  select(`Country Name`, `2022`) |>
  filter(is.na(`2022`))
```

**Note como en el bloque anterior las columnas `Country Name` y `2022` deben escribirse entre comillas inversas debido a que una contiene espacios y la otra comienza con un número.**

La función [tidyr::drop_na()](https://tidyr.tidyverse.org/reference/drop_na.html) remueve las filas con valores `NA` en una o varias columnas.

```{r}
#| label: filter-ejemplo-08

# Filas con valor diferente a NA en la columna 2022
esperanza_vida |>
  select(`Country Name`,
         `2022`) |>
  drop_na(`2022`)
```

```{r}
#| label: filter-ejemplo-09

# Filas con valor diferente a NA en cualquier columna
penguins |>
  select(species,
         bill_length_mm,
         bill_depth_mm,
         flipper_length_mm,
         body_mass_g,
         sex) |>
  drop_na()
```

### arrange()
La función [arrange()](https://dplyr.tidyverse.org/reference/arrange.html) cambia el orden de las filas de un data frame de acuerdo con los valores de las columnas seleccionadas.

```{r}
#| label: arrange-ejemplo-01

# Ordenamiento ascendente por las columnas POP_EST y GDP_MD
paises |>
  arrange(POP_EST, GDP_MD) |>
  select(NAME, POP_EST, GDP_MD)
```

Por defecto, las columnas se ordenan de manera acendente. Si se desea un orden descendente, puede utilizarse la función [desc()](https://dplyr.tidyverse.org/reference/desc.html).

```{r}
#| label: arrange-ejemplo-02

# Ordenamiento descendente por las columnas POP_EST y GDP_MD
paises |>
  arrange(desc(POP_EST), desc(GDP_MD)) |>
  select(NAME, POP_EST, GDP_MD)
```

Los valores `NA` (si hay alguno) se ubican al final de cualquier ordenamiento.

### mutate()
La función [mutate()](https://dplyr.tidyverse.org/reference/mutate.html) crea o modifica columnas en un data frame.

```{r}
#| label: mutate-ejemplo-01

# Creación de la columna GDP_PC,
# correspondiente al producto interno bruto per cápita en dólares
paises <-
  paises |>
  mutate(GDP_PC = (GDP_MD * 1000000) / POP_EST)

# Despliegue
paises |>
  select(NAME, GDP_MD, POP_EST, GDP_PC)
```

### group_by() y summarize()
La función [summarize()](https://dplyr.tidyverse.org/reference/summarise.html) se utiliza generalmente junto con la función [group_by()](https://dplyr.tidyverse.org/reference/group_by.html) para realizar cálculos en grupos de filas de un data frame. `group_by()` agrupa las filas y `summarize()` realiza los cálculos (ej. sumas, promedios) en las columnas, para cada grupo. El resultado es un nuevo data frame con una fila por grupo. Si no hay agrupación, se retorna una sola fila correspondiente a los cálculos para todo el data frame.

Ejemplos de cálculos en grupos:

```{r}
#| label: summarise-ejemplo-02

# Mínimo, máximo, promedio de población y cantidad de países
# para cada región de la ONU
paises |>
  group_by(REGION_UN) |>
  summarize(
    POP_EST_MIN = min(POP_EST, na.rm = TRUE),
    POP_EST_MAX = max(POP_EST, na.rm = TRUE),
    POP_EST_MEAN = mean(POP_EST, na.rm = TRUE),
    n = n()
  )
```

La función [n()](https://dplyr.tidyverse.org/reference/context.html) cuenta la cantidad de filas en un grupo.

```{r}
#| label: summarise-ejemplo-03
#| message: false

# Cantidad de países por región y subregión de la ONU
paises |>
  group_by(REGION_UN, SUBREGION) |>
  summarize(
    N = n()
  ) |>
  arrange(desc(N)) |>
  kable()
```

Ejemplo de cálculos sin agrupamiento:

```{r}
#| label: summarise-ejemplo-01

# Promedio de GDP_PC y cantidad de países del mundo
paises |>
  summarise(GDP_PC_MEAN = mean(GDP_PC, na.rm = TRUE),
            n = n())
```

### Otras

#### distinct()
La función [distinct()](https://dplyr.tidyverse.org/reference/distinct.html) retorna las combinaciones únicas de filas en un data frame.

```{r}
#| label: otras-ejemplo-01

# Valores distintos de la columna CONTINENT

paises |>
  distinct(CONTINENT) |>
  kable()
```

#### count()

Una forma alternativa a `summarize()` para realizar un conteo es con la función [count()](https://dplyr.tidyverse.org/reference/count.html):

```{r}
#| label: otras-ejemplo-02

# Conteo de países por continente
paises |>
  count(CONTINENT)

# Expresión equivalente con summarize
paises |>
  group_by(CONTINENT) |>
  summarize(n = n()) |>
  kable()
```

## Ejercicios
Utilice las funciones de dplyr para responder a las siguientes preguntas sobre el conjunto de datos `paises`:

1. ¿Cuántos países hay en cada región del Banco Mundial?
2. ¿Cuál es el mínimo, máximo y promedio de producto interno bruto per cápita en el continente africano?
3. ¿Cuál es el promedio de producto interno bruto per cápita por región del Banco Mundial?

## Recursos de interés
RStudio. (2017). *Data transformation with dplyr::Cheat Sheet*. <https://github.com/rstudio/cheatsheets/blob/45c1e642468695830fd8b724587ccfe8901e2185/data-transformation.pdf>

