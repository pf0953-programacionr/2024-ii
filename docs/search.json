[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PF-0953 Programación en R 2024-II",
    "section": "",
    "text": "Bienvenida\nEste es un curso introductorio a la programación de computadoras y al procesamiento de datos geoespaciales mediante el lenguaje de programación R. También se estudian herramientas para facilitar la reproducibilidad de los procedimientos y la comunicación de las soluciones a través de Internet y otros medios. Se imparte en la Maestría Académica en Gestión Integrada del Recurso Hídrico para Latinoamérica y el Caribe de la Universidad de Costa Rica.\nEl enfoque del curso es teórico-práctico, con lecciones teóricas combinadas con ejercicios de programación en los cuales los estudiantes aplican en diversos escenarios de procesamiento de datos las habilidades y conocimientos aprendidos. No se requiere de experiencia en programación de computadoras. Es recomendable contar con conocimentos básicos de datos geoespaciales y sistemas de información geográfica.\nTanto las lecciones teóricas como las prácticas se imparten de manera presencial, con apoyo de medios virtuales. Los contenidos del curso y los recursos relacionados se comparten en el sitio web https://pf0953-programacionr.github.io/2024-ii/ y en la plataforma Mediación Virtual de la Universidad de Costa Rica.\n\n\nObjetivos\nAl finalizar el curso, el estudiantado será capaz de:\n\nDesarrollar programas en el lenguaje de programación R orientados al procesamiento de datos geoespaciales.\nAplicar un enfoque de ciencia de datos en los procesos de importación, transformación, visualización, análisis y comunicación de datos.\nDesarrollar soluciones reproducibles a problemas computacionales mediante R.\nIntegrar visualizaciones tabulares, gráficas y geoespaciales de datos en documentos y aplicaciones interactivas desarrolladas en R.\n\n\n\nPrograma\nEl programa del curso está disponible en programa del curso.\n\n\nCiclos anteriores\nEste sitio web corresponde al curso impartido durante el segundo ciclo lectivo de 2024. Para consultar las versiones de otros años y ciclos lectivos, puede visitar:\n\n2022-II\n\n\n\nInformación de contacto\nSi tiene alguna pregunta o comentario sobre este curso, por favor contacte a:\n\nManuel Vargas - manuel.vargas_d@ucr.ac.cr\nProfesor\nUniversidad de Costa Rica,\nCiudad Universitaria Rodrigo Facio,\nSan Pedro de Montes de Oca,\nCosta Rica.\n\nLos contenidos de este curso, a menos que se especifique de otra forma, se comparten mediante una licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional.",
    "crumbs": [
      "Bienvenida"
    ]
  },
  {
    "objectID": "10-introduccion-manejo-datos-geoespaciales.html",
    "href": "10-introduccion-manejo-datos-geoespaciales.html",
    "title": "10  Introducción al manejo de datos geoespaciales con R",
    "section": "",
    "text": "10.1 Trabajo previo",
    "crumbs": [
      "IV - Graficación estadística en R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introducción al manejo de datos geoespaciales con R</span>"
    ]
  },
  {
    "objectID": "10-introduccion-manejo-datos-geoespaciales.html#trabajo-previo",
    "href": "10-introduccion-manejo-datos-geoespaciales.html#trabajo-previo",
    "title": "10  Introducción al manejo de datos geoespaciales con R",
    "section": "",
    "text": "10.1.1 Lecturas\nLovelace, R., Nowosad, J., & Münchow, J. (2019). Geocomputation with R (capítulos 1, 2 y 9). CRC Press. https://geocompr.robinlovelace.net/",
    "crumbs": [
      "IV - Graficación estadística en R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introducción al manejo de datos geoespaciales con R</span>"
    ]
  },
  {
    "objectID": "10-introduccion-manejo-datos-geoespaciales.html#introducción",
    "href": "10-introduccion-manejo-datos-geoespaciales.html#introducción",
    "title": "10  Introducción al manejo de datos geoespaciales con R",
    "section": "10.2 Introducción",
    "text": "10.2 Introducción\nLa comunidad de programadores de R ha desarrollado un conjunto de paquetes para el manejo de datos geoespaciales, tanto en formatos vectoriales como raster. Algunos de los principales de estos paquetes son:\n\nEl paquete sf. Ofrece un conjunto de funciones para el manejo de datos vectoriales, de acuerdo con el estándar Simple Features.\nEl paquete terra. Implementa un conjunto de funciones para el manejo de datos raster. Es una reimplementación del paquete raster.\nEl paquete tmap. Se utiliza para programar mapas estáticos e interactivos, especialmente mapas temáticos como mapas de coropletas y mapas de burbujas.\n\nAlgunos paquetes de graficación estadística, como ggplot2 y plotly, también cuentan con capacidades para visualización de datos geoespaciales.\nEn CRAN Task View: Analysis of Spatial Data, puede encontrarse un resumen detallado de los paquetes de R con funciones geoespaciales.",
    "crumbs": [
      "IV - Graficación estadística en R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introducción al manejo de datos geoespaciales con R</span>"
    ]
  },
  {
    "objectID": "10-introduccion-manejo-datos-geoespaciales.html#datos-vectoriales",
    "href": "10-introduccion-manejo-datos-geoespaciales.html#datos-vectoriales",
    "title": "10  Introducción al manejo de datos geoespaciales con R",
    "section": "10.3 Datos vectoriales",
    "text": "10.3 Datos vectoriales\n\n10.3.1 El modelo vectorial\nEl modelo vectorial de datos está basado en puntos localizados en un sistema de referencia de coordenadas (CRS). Los puntos individuales pueden representar objetos independientes (ej. postes eléctricos, cabinas telefónicas) o pueden también agruparse para formar geometrías más complejas como líneas (ej. ríos, caminos) o polígonos (ej. fincas, países, provincias). Por lo general, los puntos tienen solo dos dimensiones (x, y), a las que se les puede agregar una tercera dimensión z, usualmente correspondiente a la altitud sobre el nivel del mar.\n\n\n10.3.2 El estándar Simple Features\nSimple Features (o Simple Feature Access) es un estándar abierto de la Organización Internacional de Estandarización (ISO) y del Open Geospatial Consortium (OGC) que especifica un modelo común de almacenamiento y acceso para geometrías de dos dimensiones (líneas, polígonos, multilíneas, multipolígonos, etc.). El estándar es implementado por muchas bibliotecas y bases de datos geoespaciales como sf, Fiona, GDAL, PostgreSQL/PostGIS, SQLite/SpatiaLite, Oracle Spatial y Microsoft SQL Server, entre muchas otras.\nLa especificación define 18 tipos de geometrías, de las cuales siete son las más comúnmente utilizadas. Estas últimas se muestran en la Figura 10.1.\n\n\n\n\n\n\n\n\nFigura 10.1: Tipos de geometrías de Simple Features más usadas. Imagen de Robin Lovelace et al..\n\n\n\n\n\n\n\n10.3.3 El paquete sf\nEl paquete sf (de Simple Features) de R implementa los modelos de datos de las geometrías de tipo vectorial: puntos, líneas, polígonos, sus versiones múltiples y las colecciones de geometrías. Está basado en bibliotecas de sofware ampliamente utilizadas en aplicaciones geoespaciales:\n\nGeospatial Data Abstraction Library (GDAL): es una biblioteca para leer y escribir datos geoespaciales en varios formatos raster y vectoriales. Implementa un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato que se utilice (GeoTIFF, NetCDF, ESRI Shapefile, GeoJSON, etc.). A pesar de que GDAL está programada en C/C++, cuenta con una interfaz de programación de aplicaciones (API) para varios lenguajes de programación, incluyendo C, C++, Python y Java. Además, ofrece un conjunto de utilitarios de línea de comandos cuyas distribuciones binarias están disponibles para varios sistemas operativos, incluyendo Windows, macOS y Linux.\nGeometry Engine, Open Source (GEOS): es una implementación en C++ de la biblioteca JTS Topology Suite (desarrollada en Java) y que implementa un conjunto de operaciones y predicados geoespaciales (ej. unión, intersección, distancia, área).\nPROJ: es una biblioteca que transforma coordenadas entre diferentes CRS, incluyendo tanto proyecciones cartográficas como transformaciones geodésicas.\n\nsf provee acceso, desde un mismo paquete de R, a la funcionalidad de estas tres bibliotecas, proporcionando así una interfaz unificada para leer y escribir datos geoespaciales mediante GDAL, realizar operaciones con geometrías mediante GEOS y efectuar transformaciones entre sistemas de coordenadas mediante PROJ.\nEn sf, los conjuntos de datos geoespaciales se almacenan en objetos de una clase también llamada sf, los cuales son data frames que contiene una columna especial para las geometrías. Esta columna se denomina generalmente geom o geometry (aunque pueden tener cualquier otro nombre). El manejo de datos geoespaciales como data frames permite manipularlos con las funciones ya desarrolladas para este tipo de datos y con la misma forma de referenciar las filas (observaciones) y las columnas (variables).\n\n10.3.3.1 Instalación y carga\n\n# Instalación de sf\ninstall.packages(\"sf\")\n\n\n# Carga de sf\nlibrary(sf)\n\n\n\n10.3.3.2 Métodos\nLa lista de métodos (i.e. funciones) de la clase sf puede obtenerse a través de la función methods():\n\n# Métodos de la clase sf\nmethods(class = \"sf\")\n\n [1] [                            [[&lt;-                        \n [3] [&lt;-                          $&lt;-                         \n [5] aggregate                    as.data.frame               \n [7] cbind                        coerce                      \n [9] dbDataType                   dbWriteTable                \n[11] duplicated                   identify                    \n[13] initialize                   merge                       \n[15] plot                         points                      \n[17] print                        rbind                       \n[19] show                         slotsFromS3                 \n[21] st_agr                       st_agr&lt;-                    \n[23] st_area                      st_as_s2                    \n[25] st_as_sf                     st_as_sfc                   \n[27] st_bbox                      st_boundary                 \n[29] st_break_antimeridian        st_buffer                   \n[31] st_cast                      st_centroid                 \n[33] st_collection_extract        st_concave_hull             \n[35] st_convex_hull               st_coordinates              \n[37] st_crop                      st_crs                      \n[39] st_crs&lt;-                     st_difference               \n[41] st_drop_geometry             st_exterior_ring            \n[43] st_filter                    st_geometry                 \n[45] st_geometry&lt;-                st_inscribed_circle         \n[47] st_interpolate_aw            st_intersection             \n[49] st_intersects                st_is_full                  \n[51] st_is_valid                  st_is                       \n[53] st_join                      st_line_merge               \n[55] st_m_range                   st_make_valid               \n[57] st_minimum_rotated_rectangle st_nearest_points           \n[59] st_node                      st_normalize                \n[61] st_point_on_surface          st_polygonize               \n[63] st_precision                 st_reverse                  \n[65] st_sample                    st_segmentize               \n[67] st_set_precision             st_shift_longitude          \n[69] st_simplify                  st_snap                     \n[71] st_sym_difference            st_transform                \n[73] st_triangulate_constrained   st_triangulate              \n[75] st_union                     st_voronoi                  \n[77] st_wrap_dateline             st_write                    \n[79] st_z_range                   st_zm                       \n[81] text                         transform                   \nsee '?methods' for accessing help and source code\n\n\nSeguidamente, se describen y ejemplifican algunos de los métodos básicos de la clase sf.\n\n10.3.3.2.1 st_read() - lectura de datos\nEl método st_read() lee datos vectoriales de una fuente en formato geoespacial (ej. shapefiles, archivos GeoJSON, bases de datos geoespaciales) y los recupera en un objeto sf.\nEn el siguiente bloque de código en R, se utiliza el método st_read() para leer un archivo GPKG con los polígonos de las provincias de Costa Rica. Este archivo proviene de un geoservicio de tipo Web Feature Service (WFS) publicado por el Instituto Geográfico Nacional (IGN).\n\n# Lectura de una capa vectorial (GPKG) de provincias de Costa Rica\nprovincias &lt;-\n  st_read(\n    \"https://github.com/pf0953-programacionr/2024-ii/raw/refs/heads/main/datos/ign/provincias.gpkg\",\n    quiet = TRUE # para evitar el despliegue de mensajes\n  )\n\nst_read() también puede crear objetos sf a partir de archivos de texto. Esta variante se utiliza principalmente cuando el archivo contiene coordenadas correspondientes a geometrías de puntos.\nEn el siguiente bloque de código, se utiliza st_read() para leer un archivo CSV con registros de presencia de félidos (familia Felidae) de Costa Rica, el cual contiene dos columnas llamadas decimalLongitude y decimalLatitude correspondientes a la longitud decimal y latitud decimal en las que fue observado cada felino. Este archivo proviene de una consulta al portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF).\n\n# Lectura de un archivo CSV con registros de presencia de félidos en Costa Rica\nfelidos &lt;-\n  st_read(\n    \"https://raw.githubusercontent.com/pf0953-programacionr/2024-ii/refs/heads/main/datos/gbif/felidos.csv\",\n    options = c(\n      \"X_POSSIBLE_NAMES=decimalLongitude\", # columna de longitud decimal\n      \"Y_POSSIBLE_NAMES=decimalLatitude\"   # columna de latitud decimal\n    ),\n    quiet = TRUE\n  )\n\nTanto provincias como felidos son objetos de la clase sf (y además de data.frame).\n\n# Clase del objeto provincias\nclass(provincias)\n\n[1] \"sf\"         \"data.frame\"\n\n# Clase del objeto felidos\nclass(felidos)\n\n[1] \"sf\"         \"data.frame\"\n\n\nAl escribirse el nombre de un objeto sf en la consola de R, se despliega información general sobre este.\n\n# Información general sobre el objeto provincias\nprovincias\n\nSimple feature collection with 7 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -87.10193 ymin: 5.499137 xmax: -82.55285 ymax: 11.21964\nGeodetic CRS:  WGS 84\n                 gml_id                gml_id2 OBJECTID CÓDIGO CÓDIGO_PROVINCIA\n1 limiteprovincial_5k.1 LIMITE_PROVINCIAL.2715     2715 160103                2\n2 limiteprovincial_5k.2 LIMITE_PROVINCIAL.2716     2716 160103                3\n3 limiteprovincial_5k.3 LIMITE_PROVINCIAL.2717     2717 160103                5\n4 limiteprovincial_5k.4 LIMITE_PROVINCIAL.2718     2718 160103                4\n5 limiteprovincial_5k.5 LIMITE_PROVINCIAL.2719     2719 160103                7\n6 limiteprovincial_5k.6 LIMITE_PROVINCIAL.2720     2720 160103                6\n7 limiteprovincial_5k.7 LIMITE_PROVINCIAL.2721     2721 160103                1\n   PROVINCIA\n1   Alajuela\n2    Cartago\n3 Guanacaste\n4    Heredia\n5      Limón\n6 Puntarenas\n7   San José\n                                                                                                                                                                                                        ORIGEN_DEL_TOPÓNIMO\n1                                                                                                                  Se remonta al paraje llamado La Lajuela que por primera vez se cita en los Protocolos de Cartago de 1657\n2                                         Don Juan Vázques de Coronado escogió el sitio en el valle del Guarco para trasladar a la ciudad de Garcimuños, en 1563, bautizando al nuevo asentamiento con el nombre de Cartago\n3        En alegoria a un frondoso árbol de Guanacaste ubicado en la intersección de los caminos que se dirigían a Nicoya, Bagaces y Rivas, en lo que hoy día es el parque de Liberia. Esta referencia data del siglo XVIII\n4                                        En correspondiencia al Presidente  de la Real Audiencia de Guatemala, Capitán General don Alonso Fernández de Heredia, de la Inmaculada Concepción de Cubujuquí a Villa de Heredia\n5                                                                                         El origen del nombre de la provincia se remonta a 1852, cuando por primera vez se cita en un documento oficial el puerto de Limón\n6 En documento de 1720, se menciona la llegada del pirata Chipperton a la zona, en el cual aparece la descripcíon referente a una embarcación pequeña en la Punta de Arena, adoptando con el tiempo el nombre de Puntarenas\n7                                                                                                                                              Se remonta a la creación de la ermita dedicada al Patriarca San José en 1737\n      VERSIÓN                               GLOBALID\n1 20240703001 {322A624B-14A4-44DB-BA11-F37A656BF296}\n2 20240703001 {46E33550-F4C9-436F-ADD7-CE70A6C46EB1}\n3 20240703001 {49CD624C-A818-4AF3-9370-DC219973EC03}\n4 20240703001 {1CA4FA45-F32C-4088-9031-C48CFC460B34}\n5 20240703001 {A062C16C-B115-439D-BB17-B261F64AF776}\n6 20240703001 {8D914665-65A7-44B6-9D63-95865A946757}\n7 20240703001 {B4447D8B-B85A-4D5E-A1D6-0EA14F13E084}\n                           SHAPE\n1 MULTIPOLYGON (((-84.66639 1...\n2 MULTIPOLYGON (((-84.03403 9...\n3 MULTIPOLYGON (((-85.3575 11...\n4 MULTIPOLYGON (((-84.02428 1...\n5 MULTIPOLYGON (((-83.7025 10...\n6 MULTIPOLYGON (((-84.82622 1...\n7 MULTIPOLYGON (((-83.9281 10...\n\n\n\n\n10.3.3.2.2 st_crs() y st_transform() - manejo de sistemas de coordenadas\nEl método st_crs() retorna el CRS de un objeto sf.\n\n# Despliegue del CRS del objeto provincias\nst_crs(provincias)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n# Despliegue CRS del objeto felidos\nst_crs(felidos)\n\nCoordinate Reference System: NA\n\n\nst_crs() también puede asignar un CRS a un objeto sf que no lo tiene.\n\n# Asignación de un CRS al objeto felidos\nst_crs(felidos) &lt;- 4326\n\nEl método st_transform() transforma un objeto sf a un nuevo CRS.\n\n# Transformación del CRS del objeto provincias a WGS84 (EPSG = 4326)\nprovincias &lt;-\n  provincias |&gt;\n  st_transform(4326)\n\n\n\n10.3.3.2.3 plot() - mapeo\nEl método plot() grafica objetos sf en un mapa.\n\n# Mapeo de las geometrías del objeto provincias\nplot(provincias$SHAPE)\n\n\n\n\n\n\n\n# Mapeo con argumentos adicionales de plot()\nplot(\n  provincias$SHAPE,\n  extent = st_bbox(c(xmin = -86.0, xmax = -82.3, ymin = 8.0, ymax = 11.3)),\n  main = \"Provincias de Costa Rica\",\n  axes = TRUE,\n  graticule = TRUE\n)\n\n\n\n\n\n\n\n\nLos argumentos reset y add de plot() permiten generar un mapa con varias capas.\n\n# Primera capa del mapa\nplot(\n  provincias$SHAPE,\n  extent = st_bbox(c(xmin = -86.0, xmax = -82.3, ymin = 8.0, ymax = 11.3)),\n  main = \"Registros de presencia de félidos en Costa Rica\",\n  axes = TRUE,\n  graticule = TRUE,\n  reset = FALSE\n)\n\n# Segunda capa\nplot(felidos$geometry,\n     add = TRUE,     \n     pch = 16,\n     col = \"orange\")\n\n\n\n\n\n\n\n\nPara conocer los valores del argumento pch, puede consultar R plot pch symbols.\n\n\n10.3.3.2.4 st_write() - escritura de datos\nEl método st_write() guarda en el disco un objeto sf en los diferentes formatos vectoriales de GDAL.\n\n# Especificación del directorio de trabajo (debe utilizarse una ruta existente)\nsetwd(\"/home/mfvargas\")\n\n# Escritura del objeto provincias en formato GeoJSON\nprovincias |&gt;\n  st_write(\"provincias.geojson\")\n\n# Escritura del objeto felidos en formato KML\nfelidos |&gt;\n  st_write(\"felidos.kml\")\n\n\n\n10.3.3.2.5 Otros\n\n# Cantidad de filas de un objeto sf\nnrow(provincias)\n\n[1] 7\n\n# Cantidad de columnas de un objeto sf\nncol(provincias)\n\n[1] 10\n\n# Resumen de la columna de geometría\nsummary(provincias$SHAPE)\n\n MULTIPOLYGON     epsg:4326 +proj=long... \n            7             0             0 \n\n\n\n\n\n\n10.3.4 Mapeo de objetos sf::sf con otros paquetes\n\n10.3.4.1 tmap\nEl paquete tmap genera mapas estáticos e interactivos con una sintaxis similar a la que utiliza el paquete ggplot2 para generar gráficos.\n\n10.3.4.1.1 Instalación y carga\nDe acuerdo con la recomendación que se brinda en el sitio web de tmap, se instala la versión disponible ahí (versión 4) y no la disponible en CRAN (versión 3).\n\n# Instalación de tmap (desde su repositorio en GitHub)\ninstall.packages(\"remotes\")\ninstall_github(\"r-tmap/tmap\")\n\n\n# Carga de tmap\nlibrary(tmap)\n\n\n\n10.3.4.1.2 Ejemplos de uso\nEl paquete tmap incluye varios conjuntos de datos de ejemplo, como el conjunto de datos World, que contiene información geoespacial y socioeconómica de países del mundo. El siguiente bloque de código muestra un mapa básico con los contornos de los países.\n\n# Carga de datos de ejemplo\ndata(\"World\")\n\n# Modo estático\ntmap_mode(\"plot\")\n\n# Modo interactivo\n# tmap_mode(\"view\")\n\n# Mapa del mundo\ntm_shape(World) +\n  tm_polygons()\n\n\n\n\n\n\n\n\nLa función tm_shape() especifica el objeto espacial que se va a visualizar, mientras que tm_polygons() dibuja los polígonos.\nEl siguiente bloque de código crea un mapa de coropletas que colorea el mapa de acuerdo con el valor de una variable.\n\n# Mapa de coropletas por densidad de población\ntm_shape(World, name = \"Países\") +\n  tm_polygons(\n    col = \"pop_est_dens\", # columna para las coropletas\n    style = \"quantile\", # método de clasificación\n    palette = \"YlOrRd\", # paleta de colores\n    id = \"name\", # campo que se muestra al pasar el ratón\n    popup.vars = c(\"Área\" = \"area\", # campos de la ventana de pop-up\n                   \"Población\" = \"pop_est\",\n                   \"Densidad de población\" = \"pop_est_dens\"),\n    title = \"Densidad de población\")\n\n\n\n\n\n\n\n\nA continuación, se muestran las capas de provincias de Costa Rica (polígonos) y de registros de presencia de félidos de Costa Rica (puntos).\n\n# Crear mapa de provincias y félidos\nmapa_provincias_felidos &lt;-\n  tm_view(set.view = c(lon = -84.2, lat = 9.6, zoom = 7))  + # centro y zoom inicial\n  tm_shape(provincias, name = \"Provincias\") + # capa de provincias\n  tm_borders() +\n  tm_shape(felidos, name = \"Félidos\") + # capa de félidos\n  tm_dots(\n    col = \"species\", # color de los puntos\n    palette = \"Set1\", # paleta de colores\n    title = \"Especie\", # título de la leyenda\n    size = 0.05,  # tamaño de los puntos\n    id = \"species\", \n    popup.vars = c(\"Localidad\" = \"locality\",   \n                   \"Fecha\" = \"eventDate\",\n                   \"Fuente\" = \"institutionCode\")\n  ) +\n  tm_scale_bar(position = c(\"left\", \"bottom\")) # escala\n\n# Cambiar a modo interactivo\ntmap_mode(\"view\")\n\n# Desplegar el mapa\nmapa_provincias_felidos",
    "crumbs": [
      "IV - Graficación estadística en R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introducción al manejo de datos geoespaciales con R</span>"
    ]
  },
  {
    "objectID": "10-introduccion-manejo-datos-geoespaciales.html#datos-raster",
    "href": "10-introduccion-manejo-datos-geoespaciales.html#datos-raster",
    "title": "10  Introducción al manejo de datos geoespaciales con R",
    "section": "10.4 Datos raster",
    "text": "10.4 Datos raster\n\n10.4.1 El modelo raster\nEl modelo de datos raster usualmente consiste de un encabezado y de una matriz con celdas (también llamadas pixeles) de un mismo tamaño. El encabezado define el CRS, la extensión y el punto de origen de una capa raster. Por lo general, el origen se ubica en la esquina inferior izquierda o en la esquina superior izquierda de la matriz. La extensión se define mediante el número de filas, el número de columnas y el tamaño (resolución) de la celda.\nCada celda tiene una identificación (ID) y almacena un único valor, el cual puede ser numérico o categórico, como se muestra en la Figura 10.2.\n\n\n\n\n\n\n\n\nFigura 10.2: El modelo raster: (A) ID de las celdas, (B) valores de las celdas, (C) mapa raster de colores. Imagen de Robin Lovelace et al.\n\n\n\n\n\nA diferencia del modelo vectorial, el modelo raster no necesita almacenar todas las coordenadas de cada geometría (i.e. las esquinas de las celdas), debido a que la ubicación de cada celda puede calcularse a partir de la información contenida en el encabezado. Esta simplicidad, en conjunto con el álgebra de mapas, permiten que el procesamiento de datos raster sea mucho más eficiente que el procesamiento de datos vectoriales. Por otra parte, el modelo vectorial es mucho más flexible en cuanto a las posibilidades de representación de geometrías y almacenamiento de valores, por medio de múltiples elementos de datos.\nLos mapas raster generalmente almacenan fenómenos continuos como elevación, precipitación, temperatura, densidad de población y datos espectrales. También es posible representar mediante raster datos discretos, tales como tipos de suelo o clases de cobertura de la tierra, como se muestra en la Figura 10.3.\n\n\n\n\n\n\n\n\nFigura 10.3: Ejemplos de mapas raster continuos y categóricos. Imagen de Robin Lovelace et al.\n\n\n\n\n\n\n\n10.4.2 El paquete terra\nEl paquete terra implementa un conjunto de funciones para la lectura, escritura, manipulación, análisis y modelado de datos raster y vectoriales. Implementa la clase SpatRaster para manejar los objetos raster.\n\n10.4.2.1 Instalación y carga\n\n# Instalación de terra\ninstall.packages(\"terra\")\n\n\n# Carga de terra\nlibrary(terra)\n\n\n\n10.4.2.2 Métodos\nLa función help() presenta la documentación del paquete terra, incluyendo sus métodos.\n\n# Ayuda sobre el paquete terra\nhelp(\"terra-package\")\n\nSeguidamente, se describen y ejemplifican algunos de los métodos básicos para manejo de datos raster del paquete terra.\n\n10.4.2.2.1 rast() - lectura de datos\nEl método rast() lee datos raster.\nEn el siguiente bloque de código en R, se utiliza el método rast() para leer un archivo GeoTIFF correspondiente a la altitud de Costa Rica. Este archivo proviene de WorldClim, un conjunto de capas climáticas disponibles en varias resoluciones espaciales.\n\n# Lectura de una capa raster de altitud\naltitud &lt;-\n  rast(\n    \"https://github.com/pf0953-programacionr/2024-ii/raw/refs/heads/main/datos/worldclim/altitud.tif\"\n  )\n\naltitud es un objeto de la clase SpatRaster.\n\n# Clase del objeto altitud\nclass(altitud)\n\n[1] \"SpatRaster\"\nattr(,\"package\")\n[1] \"terra\"\n\n\nAl escribirse el nombre de un objeto SpatRaster en la consola de R, se despliega información general sobre este.\n\n# Información general sobre el objeto altitud\naltitud\n\nclass       : SpatRaster \ndimensions  : 686, 545, 1  (nrow, ncol, nlyr)\nresolution  : 0.008333333, 0.008333333  (x, y)\nextent      : -87.1, -82.55833, 5.5, 11.21667  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : altitud.tif \nname        : altitud \n\n\n\n\n10.4.2.2.2 crs() y project() - manejo de sistemas de coordenadas\nEl método crs() retorna el CRS de un objeto SpatRaster.\n\n# CRS del objeto altitud\ncrs(altitud)\n\n[1] \"GEOGCRS[\\\"WGS 84\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    ID[\\\"EPSG\\\",4326]]\"\n\n\ncrs() también puede asignar un CRS a un objeto SpatRaster.\n\n# Asignación de un CRS a una copia del objeto altitud\naltitud_crtm05 &lt;- altitud\ncrs(altitud_crtm05) &lt;- \"EPSG:5367\"\n\n# Consulta\ncrs(altitud_crtm05)\n\n[1] \"PROJCRS[\\\"CR05 / CRTM05\\\",\\n    BASEGEOGCRS[\\\"CR05\\\",\\n        DATUM[\\\"Costa Rica 2005\\\",\\n            ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",5365]],\\n    CONVERSION[\\\"Costa Rica TM 2005\\\",\\n        METHOD[\\\"Transverse Mercator\\\",\\n            ID[\\\"EPSG\\\",9807]],\\n        PARAMETER[\\\"Latitude of natural origin\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8801]],\\n        PARAMETER[\\\"Longitude of natural origin\\\",-84,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8802]],\\n        PARAMETER[\\\"Scale factor at natural origin\\\",0.9999,\\n            SCALEUNIT[\\\"unity\\\",1],\\n            ID[\\\"EPSG\\\",8805]],\\n        PARAMETER[\\\"False easting\\\",500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8806]],\\n        PARAMETER[\\\"False northing\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8807]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"northing (N)\\\",north,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"easting (E)\\\",east,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Cadastre, engineering survey, topographic mapping (large and medium scale).\\\"],\\n        AREA[\\\"Costa Rica - onshore and offshore east of 86°30'W.\\\"],\\n        BBOX[2.21,-86.5,11.77,-81.43]],\\n    ID[\\\"EPSG\\\",5367]]\"\n\n\nEl método project() reproyecta un objeto SpatRaster a un nuevo CRS.\n\n# Transformación del CRS del objeto altitud\naltitud_utm17N &lt;-\n  altitud |&gt;\n  project(\"EPSG:8910\")\n\n# Consulta\ncrs(altitud_utm17N)\n\n[1] \"PROJCRS[\\\"CR-SIRGAS / UTM zone 17N\\\",\\n    BASEGEOGCRS[\\\"CR-SIRGAS\\\",\\n        DATUM[\\\"CR-SIRGAS\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",8907]],\\n    CONVERSION[\\\"UTM zone 17N\\\",\\n        METHOD[\\\"Transverse Mercator\\\",\\n            ID[\\\"EPSG\\\",9807]],\\n        PARAMETER[\\\"Latitude of natural origin\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8801]],\\n        PARAMETER[\\\"Longitude of natural origin\\\",-81,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8802]],\\n        PARAMETER[\\\"Scale factor at natural origin\\\",0.9996,\\n            SCALEUNIT[\\\"unity\\\",1],\\n            ID[\\\"EPSG\\\",8805]],\\n        PARAMETER[\\\"False easting\\\",500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8806]],\\n        PARAMETER[\\\"False northing\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8807]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"(E)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"(N)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Oil and gas exploration and production.\\\"],\\n        AREA[\\\"Costa Rica - offshore - Caribbean sea.\\\"],\\n        BBOX[9.6,-83.6,11.77,-81.43]],\\n    ID[\\\"EPSG\\\",8910]]\"\n\n\n\n\n10.4.2.2.3 plot() - mapeo\nEl método plot() muestra objetos SpatRaster en un mapa.\n\n# Mapa de la capa de altitud\nplot(altitud)\n\n\n\n\n\n\n\n\nLos argumentos reset y add de plot() permiten generar un mapa con varias capas.\n\n# Primera capa del mapa (raster)\nplot(\n  altitud,\n  main = \"Registros de presencia de félidos en Costa Rica\",\n  axes = TRUE,\n  reset = FALSE\n)\n\n# Segunda capa (vectorial)\nplot(felidos$geometry,\n     add = TRUE,     \n     pch = 16,\n     col = \"orange\")\n\n\n\n\n\n\n\n\n\n\n10.4.2.2.4 writeRaster() - escritura de datos\nLa función writeRaster() guarda en el disco un objeto SpatRaster en los diferentes formatos raster de GDAL.\n\n# Especificación del directorio de trabajo (debe utilizarse una ruta existente)\nsetwd(\"/home/mfvargas\")\n\n# Escritura del objeto altitud\naltitud |&gt;\n  writeRaster(\"altitud.asc\")\n\n\n\n10.4.2.2.5 Otros\n\n# Cantidad de filas de un objeto SpatRaster\nnrow(altitud)\n\n[1] 686\n\n# Cantidad de columnas de un objeto SpatRaster\nncol(altitud)\n\n[1] 545\n\n# Resolución de un objeto SpatRaster\nres(altitud)\n\n[1] 0.008333333 0.008333333\n\n\n\n\n\n\n10.4.3 Mapeo de objetos terra::SpatRaster con otros paquetes\n\n10.4.3.1 tmap\nEl método tm_raster() de tmap despliega un objeto SpatRaster en un mapa tmap. En el siguiente bloque, se muestran en un mapa tmap las capas de altitud (raster), provincias (polígonos) y registros de presencia de félidos (puntos).\n\n# Crear mapa de provincias y félidos\nmapa_altitud_provincias_felidos &lt;-\n  tm_view(set.view = c(lon = -84.2, lat = 9.6, zoom = 7))  + # centro y zoom inicial\n  tm_shape(altitud, name = \"Altitud\") + # capa de altitud\n  tm_raster(\n    palette = c(\"green\", \"yellow\", \"brown\", \"gray\"), \n    title = \"Altitud (m)\"\n  ) +\n  tm_shape(provincias, name = \"Provincias\") + # capa de provincias\n  tm_borders() +\n  tm_shape(felidos, name = \"Félidos\") + # capa de félidos\n  tm_dots(\n    col = \"species\", # color de los puntos\n    palette = \"Set1\", # paleta de colores\n    title = \"Especie\", # título de la leyenda\n    size = 0.05,  # tamaño de los puntos\n    id = \"species\", # campo que se muestra al pasar el ratón\n    popup.vars = c(\"Localidad\" = \"locality\",   # campos de la ventana de pop-up\n                   \"Fecha\" = \"eventDate\",\n                   \"Fuente\" = \"institutionCode\")\n  ) +\n  tm_scale_bar(position = c(\"left\", \"bottom\")) # escala\n\n# Cambiar a modo interactivo\ntmap_mode(\"view\")\n\n# Desplegar el mapa\nmapa_altitud_provincias_felidos",
    "crumbs": [
      "IV - Graficación estadística en R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introducción al manejo de datos geoespaciales con R</span>"
    ]
  },
  {
    "objectID": "10-introduccion-manejo-datos-geoespaciales.html#ejercicios",
    "href": "10-introduccion-manejo-datos-geoespaciales.html#ejercicios",
    "title": "10  Introducción al manejo de datos geoespaciales con R",
    "section": "10.5 Ejercicios",
    "text": "10.5 Ejercicios\nEn un documento Quarto incluya:\n\nUna tabla DT con las columnas del conjunto de datos de félidos de Costa Rica correspondientes a especie (species), fecha (eventDate), provincia (stateProvince), localidad (locality), longitud (decimalLongitude) y latitud (decimalLatitude).\n\nLas columnas deben, si es necesario, convertirse al tipo de datos adecuado (ej. Date).\nLos encabezados de las columnas en la tabla deben desplegarse en español, pero no deben alterarse los nombres de las columnas. Sugerencia: utilice el argumento colnames de la función datatable().\nLos controles de la tabla deben estar en español.\n\nUn gráfico de barras, generado con gglot2 y traducido a plotly con ggplotly(), que muestre la cantidad de registros para cada especie de félidos.\n\nLas barras deben estar ordenadas de mayor a menor.\nTodos los controles y etiquetas del gráfico deben estar en español.\n\nUn mapa tmap con las siguientes capas:\n\nProvincias de Costa Rica (polígonos).\nRegistros de presencia de félidos (puntos).\n\n\nPublique el documento como un sitio web en GitHub Pages.",
    "crumbs": [
      "IV - Graficación estadística en R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introducción al manejo de datos geoespaciales con R</span>"
    ]
  },
  {
    "objectID": "10-introduccion-manejo-datos-geoespaciales.html#recursos-de-interés",
    "href": "10-introduccion-manejo-datos-geoespaciales.html#recursos-de-interés",
    "title": "10  Introducción al manejo de datos geoespaciales con R",
    "section": "10.6 Recursos de interés",
    "text": "10.6 Recursos de interés\nBivand, R. (2022). CRAN Task View: Analysis of Spatial Data. https://CRAN.R-project.org/view=Spatial\nHoltz, Y. (s. f.). The R Graph Gallery – Help and inspiration for R charts. The R Graph Gallery. https://r-graph-gallery.com/\nPopovic, M. (s. f.). Milos Makes Maps. https://www.youtube.com/@milos-makes-maps\nR-Ladies Madrid. (2021). R-Ladies Madrid (español)—Analiza datos espaciales—Stephanie Orellana. https://www.youtube.com/watch?v=59tO2ARvVVU",
    "crumbs": [
      "IV - Graficación estadística en R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introducción al manejo de datos geoespaciales con R</span>"
    ]
  },
  {
    "objectID": "parte-i-introduccion-programacion-computadoras-ciencia-datos.html",
    "href": "parte-i-introduccion-programacion-computadoras-ciencia-datos.html",
    "title": "I - Introducción a la programación de computadoras y a la ciencia de datos",
    "section": "",
    "text": "1 Introducción a la programación de computadoras\n2 Introducción a la ciencia de datos",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos"
    ]
  },
  {
    "objectID": "parte-ii-lenguaje-programacion-r.html",
    "href": "parte-ii-lenguaje-programacion-r.html",
    "title": "II - El lenguaje de programación R",
    "section": "",
    "text": "3 R - lenguaje de programación para análisis estadístico",
    "crumbs": [
      "II - El lenguaje de programación R"
    ]
  },
  {
    "objectID": "parte-iii-herramientas-investigacion-reproducible-desarrollo-colaborativo.html",
    "href": "parte-iii-herramientas-investigacion-reproducible-desarrollo-colaborativo.html",
    "title": "III - Herramientas para investigación reproducible y desarrollo colaborativo",
    "section": "",
    "text": "5 Reproducibilidad\n6 Markdown - lenguaje de marcado\n7 Git - sistema de control de versiones\n8 Quarto - sistema de publicación técnica y científica",
    "crumbs": [
      "III - Herramientas para investigación reproducible y desarrollo colaborativo"
    ]
  },
  {
    "objectID": "parte-iv-graficacion-estadistica-r.html",
    "href": "parte-iv-graficacion-estadistica-r.html",
    "title": "IV - Graficación estadística en R",
    "section": "",
    "text": "7 Tidyverse - colección de paquetes para ciencia de datos\n8 dplyr - gramática para manipulación de datos\n9 ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "crumbs": [
      "IV - Graficación estadística en R"
    ]
  },
  {
    "objectID": "programa_curso.html",
    "href": "programa_curso.html",
    "title": "Programa del curso",
    "section": "",
    "text": "Programa del curso",
    "crumbs": [
      "Programa del curso"
    ]
  }
]